---
import Section from '@/components/Section.astro';
import Card from '@/components/Card.astro';
import Base from '@/layouts/Base.astro';
import Heading from '@/components/Heading.astro';
import { AppConfig } from '@/utils/AppConfig';
import { MarkdownInstance } from 'astro/dist/@types/astro';

interface StaticPath {
    params: { tag: string };
    props: { posts: MarkdownInstance<Record<string, any>>[] };
}

interface StaticPathsReturn {
    paths: StaticPath[];
    fallback: boolean;
}

export async function getStaticPaths(): Promise<StaticPathsReturn> {
    const allPosts: MarkdownInstance<Record<string, any>>[] = await Astro.glob('../posts/*.md');

    if (allPosts.length === 0) {
        return { paths: [], fallback: false };
    }

    const allTags: Set<string> = new Set(
        allPosts.map(post => post.frontmatter.tags).flat()
    );

    return {
        paths: [...allTags].map(tag => ({
            params: { tag },
            props: {
                posts: allPosts.filter(post => post.frontmatter.tags.includes(tag))
            }
        })),
        fallback: false
    };
}

interface Props {
    posts: MarkdownInstance<Record<string, any>>[];
}

const { tag } = Astro.params;
const title = AppConfig.title;
const description = AppConfig.description;

const { posts } = Astro.props;
---

<Base head={{ title, description }}>
    <Section>
        <Heading title={`Posts with #${tag}`} />
    </Section>
    <Section>
        {
            posts
                .filter(post => post.frontmatter.tags?.includes(tag))
                .map(post => (
                    <div class="mb-4 basis-1 last:mb-0">
                        <Card post={post} />
                    </div>
                ))
        }
    </Section>
</Base>
